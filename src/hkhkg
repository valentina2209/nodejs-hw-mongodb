import { registerUser, loginUser } from '../services/auth.service.js';

export async function registerController(req, res) {
  const user = await registerUser(req.body);

  res.json({
    status: 201,
    message: 'User registered successfully',
    data: user,
  });
}

export async function loginController(req, res) {
  const session = await loginUser(req.body.email, req.body.password);

  res.json({
    status: 200,
    message: 'User login successfully',
    data: {
      accessToken: session.accessToken,
    },
  });
}

import bcrypt from 'bcrypt';
import createHttpError from 'http-errors';

import { User } from '../models/user.js';
import { Session } from '../models/session.js';

export async function registerUser(payload) {
  const user = await User.findOne({ email: payload.email });

  if (user !== null) {
    throw new createHttpError.Conflict('Email is already in use');
  }

  payload.password = await bcrypt.hash(payload.password, 10);

  return User.create(payload);
}

export async function loginUser(email, password) {
  const user = await User.findOne({ email });

  if (user === null) {
    throw new createHttpError.Unauthorized('Email or password is incorrect');
  }

  const isMatch = await bcrypt.compare(password, user.password);

  if (isMatch !== true) {
    throw new createHttpError.Unauthorized('Email or password is incorrect');
  }

  await Session.deleteOne({ userId: user._id });

  return Session.create({
    userId: user._id,
    accessToken: 'ACCESS TOKEN',
    refreshToken: 'REFRESH TOKEN',
    accessTokenValidUntil: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes
    refreshTokenValidUntil: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours
  });
}

import Joi from 'joi';

export const registerSchema = Joi.object({
  name: Joi.string().required(),
  email: Joi.string().email().required(),
  password: Joi.string().required(),
});

export const loginSchema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().required(),
});

// src/validation/auth.js
import Joi from 'joi';

export const registerUserSchema = Joi.object({
  name: Joi.string().min(3).max(30).required(),
  email: Joi.string().email().required(),
  password: Joi.string().required(),
});

// src/routers/students.js







router.get('/', ctrlWrapper(getStudentsController));

router.get(
  '/:studentId',
  isValidId,
  ctrlWrapper(getStudentByIdController)
);

router.post(
  '/',
  validateBody(createStudentSchema),
  ctrlWrapper(createStudentController),
);

router.delete(
  '/:studentId',
  isValidId,
  ctrlWrapper(deleteStudentController));

router.put(
  '/:studentId',
  isValidId,
  validateBody(createStudentSchema),
  ctrlWrapper(upsertStudentController),
);

router.patch(
  '/:studentId',
  isValidId,
  validateBody(updateStudentSchema),
  ctrlWrapper(patchStudentController),
);

export default router;

// src/server.js

/* Інший код з файлу */

// замість цього імпорту і підключення
import studentsRouter from './routers/students.js';
app.use(studentsRouter);

// робимо такий імпорт і підключення
import router from './routers/index.js';
app.use(router);

import { registerUser, loginUser } from '../services/auth.service.js';

export async function registerController(req, res) {
  const user = await registerUser(req.body);

  res.json({
    status: 201,
    message: 'User registered successfully',
    data: user,
  });
}

export async function loginController(req, res) {
  const session = await loginUser(req.body.email, req.body.password);

  res.json({
    status: 200,
    message: 'User login successfully',
    data: {
      accessToken: session.accessToken,
    },
  });
}

// src/controllers/auth.js

import { registerUser } from '../services/auth.js';

export const registerUserController = async (req, res) => {
  const user = await registerUser(req.body);

  res.status(201).json({
    status: 201,
    message: 'Successfully registered a user!',
    data: user,
  });
};
